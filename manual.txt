==========================================================================

Aboloka-8 Reference Manual
          Created by Avuxo

===========================================================================

Aboloka-8

        The Aboloka-8 is a fantasy retro computer based off of old soviet
        home computers. The system is inspired by projects like Pico-8.
        Unlike with systems like the Pico-8 (a fantasy retro console), it
        is not a game console, and is more reminiscent the ZX Spectrum.

        The Aboloka-8 provides a custom instruction set specifically tai-
        lored to make assembly programming fun and accesible to provide
        an introduction to a generation of people who have never and pro-
        bably will never write assembly code for their actual home compu-
        ters.

        At the github repository for Aboloka-8 there are two implementat-
        ions of the specification defined in this manual and other liter-
        ature regarding the Aboloka-8. There is an implentation in C usi-
        ng SDL for graphics. The second implementation is written in JS
        using Canvas for graphics. The github is visible at Avuxo's page
        at https://github.com/avuxo/aboloka-8


:: Specifications

        Display: 128x128 pixels, monochrome
        Input: 30 key keyboard. 0-9, a-Z, shift, space, execute
        Memory size: 16KB
        Tape size: 54KB (can hold 2 tapes, both R/W)
        Internal storage: 16KB
        8-bit Registers: 4 (X,Y,Z,A -- X,Y,Z General; A accumulator)

:: Hello world!

        Below is an example of how the standard hello world would look
        in the instruction set used by Aboloka-8.

        In order to get to the point where you can write this program,
        type ed at the prompt. This will open up the standard Aboloka-8
        editor. From here, enter insertion mode at line 0 by typing i 0.

        PROGRAM hello
        ld $0002 ; load "Hello world" into 0x02 in memory
        ld $000B ; load a null terminator into 0x0B in memory
        PRINT $02 ; print whatever is between 0x02 and null term.
        exit ; return to OS

        Note: for more info on the instruction set, look at the "program-
        ming" section later in this manual.
        
        exit and save by hitting the ESC key and typing :wq hello.a
        This will save the file as hello.a on the local 16kb internal
        storage.

        To create an executable program, type asm hello.a hello EXEC into
        the propmt. This will assemble the program and produce an execu-
        table program.

:: The OS

        The Aboloka-8 comes with a built in operating system that is aut-
        omatically loaded from the internal ROM. The operating system is
        written in Aboloka-8 assembly and is replacable if you want a di-
        fferent experience with the Aboloka.

        The OS comes with a list of built in programs that can be execut-
        ed to perform basic tasks.
           ed          the basic editor, a line based text editor
           mv          move files from x y
           asm         the assembler for all user programs
           rm          remove a file forever (overwrites with zeros)
           ld          load a tape (takes argument 0 or 1) see: tapes

        Programs can be run any time that there is a $ showing (indicati-
        ng that the prompt is ready to be run).

        Arguments are provided to programs by separating them by spaces.
        ex: rm hello.a EXEC would delete the file hello.a

        The OS does not support sub-directories. Everything is stored in
        the root directory or on a tape.


:: Tapes

        The Aboloka-8 comes with two virtual tape drives. These tape drives
        are interfaced with via the ld command.

        When ld is run on a drive, it begins reading code at $00. Any prog-
        gram there will be loaded.

        Tapes contain 54kb of storage for writing and distributing tapes.
        Tapes can be distributed from your host operating system using the
        .tape file format.
        
:: Instruction set

        The Aboloka-8 uses 8-bit opcodes that translate 1:1 with the mneu-
        monic instruction set.

        instruction          op   description                       length
        ld $ADDRESS, $VALUE  10   load the hex VALUE into ADDRESS        4
        ldx $VALUE           11   load the hex value VALUE into X        2
        ldy $VALUE           12   load the hex value VALUE into Y        2
        ldz $VALUE           13   load the hex value VALUE into Z        2
        lda $VALUE           14   load the hex value VALUE into A        2
        cpx $VALUE           1A   compare the hex value VALUE with X     2
        cpy $VALUE           1B   compare the hex value VALUE with Y     2
        jmp $VALUE           20   jump to the memory location VALUE      2
        jmp REG              21   jump to the register REG               2
        add $VALUE           30   add VALUE to A                         2
        sub $VALUE           31   subtract VALUE form A                  2
        print $ADDRESS       56   print at ADDRESS until a 0x00 is found 3
        exit                 EA   exit the program                       1
        
